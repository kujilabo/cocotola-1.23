// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	service "github.com/kujilabo/cocotola-1.23/cocotola-auth/service"
	mock "github.com/stretchr/testify/mock"
)

// FirebaseClient is an autogenerated mock type for the FirebaseClient type
type FirebaseClient struct {
	mock.Mock
}

type FirebaseClient_Expecter struct {
	mock *mock.Mock
}

func (_m *FirebaseClient) EXPECT() *FirebaseClient_Expecter {
	return &FirebaseClient_Expecter{mock: &_m.Mock}
}

// GetUser provides a mock function with given fields: ctx, uid
func (_m *FirebaseClient) GetUser(ctx context.Context, uid string) (*service.UserRecord, error) {
	ret := _m.Called(ctx, uid)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *service.UserRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*service.UserRecord, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *service.UserRecord); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.UserRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FirebaseClient_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type FirebaseClient_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - uid string
func (_e *FirebaseClient_Expecter) GetUser(ctx interface{}, uid interface{}) *FirebaseClient_GetUser_Call {
	return &FirebaseClient_GetUser_Call{Call: _e.mock.On("GetUser", ctx, uid)}
}

func (_c *FirebaseClient_GetUser_Call) Run(run func(ctx context.Context, uid string)) *FirebaseClient_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *FirebaseClient_GetUser_Call) Return(_a0 *service.UserRecord, _a1 error) *FirebaseClient_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FirebaseClient_GetUser_Call) RunAndReturn(run func(context.Context, string) (*service.UserRecord, error)) *FirebaseClient_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyIDToken provides a mock function with given fields: ctx, idToken
func (_m *FirebaseClient) VerifyIDToken(ctx context.Context, idToken string) (*service.Token, error) {
	ret := _m.Called(ctx, idToken)

	if len(ret) == 0 {
		panic("no return value specified for VerifyIDToken")
	}

	var r0 *service.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*service.Token, error)); ok {
		return rf(ctx, idToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *service.Token); ok {
		r0 = rf(ctx, idToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, idToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FirebaseClient_VerifyIDToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyIDToken'
type FirebaseClient_VerifyIDToken_Call struct {
	*mock.Call
}

// VerifyIDToken is a helper method to define mock.On call
//   - ctx context.Context
//   - idToken string
func (_e *FirebaseClient_Expecter) VerifyIDToken(ctx interface{}, idToken interface{}) *FirebaseClient_VerifyIDToken_Call {
	return &FirebaseClient_VerifyIDToken_Call{Call: _e.mock.On("VerifyIDToken", ctx, idToken)}
}

func (_c *FirebaseClient_VerifyIDToken_Call) Run(run func(ctx context.Context, idToken string)) *FirebaseClient_VerifyIDToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *FirebaseClient_VerifyIDToken_Call) Return(_a0 *service.Token, _a1 error) *FirebaseClient_VerifyIDToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FirebaseClient_VerifyIDToken_Call) RunAndReturn(run func(context.Context, string) (*service.Token, error)) *FirebaseClient_VerifyIDToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewFirebaseClient creates a new instance of FirebaseClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFirebaseClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *FirebaseClient {
	mock := &FirebaseClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
