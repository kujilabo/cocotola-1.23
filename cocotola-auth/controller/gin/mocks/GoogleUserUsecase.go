// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kujilabo/cocotola-1.23/cocotola-auth/domain"

	mock "github.com/stretchr/testify/mock"
)

// GoogleUserUsecase is an autogenerated mock type for the GoogleUserUsecase type
type GoogleUserUsecase struct {
	mock.Mock
}

type GoogleUserUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *GoogleUserUsecase) EXPECT() *GoogleUserUsecase_Expecter {
	return &GoogleUserUsecase_Expecter{mock: &_m.Mock}
}

// Authorize provides a mock function with given fields: ctx, state, code, organizationName
func (_m *GoogleUserUsecase) Authorize(ctx context.Context, state string, code string, organizationName string) (*domain.AuthTokenSet, error) {
	ret := _m.Called(ctx, state, code, organizationName)

	if len(ret) == 0 {
		panic("no return value specified for Authorize")
	}

	var r0 *domain.AuthTokenSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*domain.AuthTokenSet, error)); ok {
		return rf(ctx, state, code, organizationName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *domain.AuthTokenSet); ok {
		r0 = rf(ctx, state, code, organizationName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AuthTokenSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, state, code, organizationName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GoogleUserUsecase_Authorize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authorize'
type GoogleUserUsecase_Authorize_Call struct {
	*mock.Call
}

// Authorize is a helper method to define mock.On call
//   - ctx context.Context
//   - state string
//   - code string
//   - organizationName string
func (_e *GoogleUserUsecase_Expecter) Authorize(ctx interface{}, state interface{}, code interface{}, organizationName interface{}) *GoogleUserUsecase_Authorize_Call {
	return &GoogleUserUsecase_Authorize_Call{Call: _e.mock.On("Authorize", ctx, state, code, organizationName)}
}

func (_c *GoogleUserUsecase_Authorize_Call) Run(run func(ctx context.Context, state string, code string, organizationName string)) *GoogleUserUsecase_Authorize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *GoogleUserUsecase_Authorize_Call) Return(_a0 *domain.AuthTokenSet, _a1 error) *GoogleUserUsecase_Authorize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GoogleUserUsecase_Authorize_Call) RunAndReturn(run func(context.Context, string, string, string) (*domain.AuthTokenSet, error)) *GoogleUserUsecase_Authorize_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateState provides a mock function with given fields: _a0
func (_m *GoogleUserUsecase) GenerateState(_a0 context.Context) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GenerateState")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GoogleUserUsecase_GenerateState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateState'
type GoogleUserUsecase_GenerateState_Call struct {
	*mock.Call
}

// GenerateState is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *GoogleUserUsecase_Expecter) GenerateState(_a0 interface{}) *GoogleUserUsecase_GenerateState_Call {
	return &GoogleUserUsecase_GenerateState_Call{Call: _e.mock.On("GenerateState", _a0)}
}

func (_c *GoogleUserUsecase_GenerateState_Call) Run(run func(_a0 context.Context)) *GoogleUserUsecase_GenerateState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GoogleUserUsecase_GenerateState_Call) Return(_a0 string, _a1 error) *GoogleUserUsecase_GenerateState_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GoogleUserUsecase_GenerateState_Call) RunAndReturn(run func(context.Context) (string, error)) *GoogleUserUsecase_GenerateState_Call {
	_c.Call.Return(run)
	return _c
}

// NewGoogleUserUsecase creates a new instance of GoogleUserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGoogleUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *GoogleUserUsecase {
	mock := &GoogleUserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
