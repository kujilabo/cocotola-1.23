// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kujilabo/cocotola-1.23/redstart/user/domain"

	mock "github.com/stretchr/testify/mock"
)

// AuthenticationUsecase is an autogenerated mock type for the AuthenticationUsecase type
type AuthenticationUsecase struct {
	mock.Mock
}

type AuthenticationUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthenticationUsecase) EXPECT() *AuthenticationUsecase_Expecter {
	return &AuthenticationUsecase_Expecter{mock: &_m.Mock}
}

// GetUserInfo provides a mock function with given fields: ctx, bearerToken
func (_m *AuthenticationUsecase) GetUserInfo(ctx context.Context, bearerToken string) (*domain.AppUserModel, error) {
	ret := _m.Called(ctx, bearerToken)

	if len(ret) == 0 {
		panic("no return value specified for GetUserInfo")
	}

	var r0 *domain.AppUserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.AppUserModel, error)); ok {
		return rf(ctx, bearerToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.AppUserModel); ok {
		r0 = rf(ctx, bearerToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AppUserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, bearerToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthenticationUsecase_GetUserInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserInfo'
type AuthenticationUsecase_GetUserInfo_Call struct {
	*mock.Call
}

// GetUserInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - bearerToken string
func (_e *AuthenticationUsecase_Expecter) GetUserInfo(ctx interface{}, bearerToken interface{}) *AuthenticationUsecase_GetUserInfo_Call {
	return &AuthenticationUsecase_GetUserInfo_Call{Call: _e.mock.On("GetUserInfo", ctx, bearerToken)}
}

func (_c *AuthenticationUsecase_GetUserInfo_Call) Run(run func(ctx context.Context, bearerToken string)) *AuthenticationUsecase_GetUserInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AuthenticationUsecase_GetUserInfo_Call) Return(_a0 *domain.AppUserModel, _a1 error) *AuthenticationUsecase_GetUserInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthenticationUsecase_GetUserInfo_Call) RunAndReturn(run func(context.Context, string) (*domain.AppUserModel, error)) *AuthenticationUsecase_GetUserInfo_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function with given fields: ctx, refreshToken
func (_m *AuthenticationUsecase) RefreshToken(ctx context.Context, refreshToken string) (string, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthenticationUsecase_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type AuthenticationUsecase_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *AuthenticationUsecase_Expecter) RefreshToken(ctx interface{}, refreshToken interface{}) *AuthenticationUsecase_RefreshToken_Call {
	return &AuthenticationUsecase_RefreshToken_Call{Call: _e.mock.On("RefreshToken", ctx, refreshToken)}
}

func (_c *AuthenticationUsecase_RefreshToken_Call) Run(run func(ctx context.Context, refreshToken string)) *AuthenticationUsecase_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AuthenticationUsecase_RefreshToken_Call) Return(_a0 string, _a1 error) *AuthenticationUsecase_RefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthenticationUsecase_RefreshToken_Call) RunAndReturn(run func(context.Context, string) (string, error)) *AuthenticationUsecase_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthenticationUsecase creates a new instance of AuthenticationUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthenticationUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthenticationUsecase {
	mock := &AuthenticationUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
