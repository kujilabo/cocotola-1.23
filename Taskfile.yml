version: '3'

tasks:
  hello:
    cmds:
      - echo 'Hello World from Task!'
    silent: true

  init:
    cmds:
      - go work init
      - go work use -r .

  setup:
    cmds:
      - pre-commit install

  pre-commit:
    cmds:
      - pre-commit run --all-files

  gazelle:
    cmds:
      - bazelisk run //:gazelle 

  mod-tidy:
    cmds:
      - bazelisk run @rules_go//go -- mod tidy

  gen-code-project:
    cmds:
      - |
        pushd {{ .PROJECT }}
        mockery
    requires:
      vars: [PROJECT]

  gen-code:
    cmds:
      - for:
          - cocotola-auth
          - cocotola-core
          - cocotola-synthesizer
        task: gen-code-project
        vars:
          PROJECT: "{{ .ITEM }}"

  lint-project:
    cmds:
      - |
        pushd {{ .PROJECT }}
        golangci-lint run --config ../.github/golangci.yml --timeout=5m
      # - |
      #   pushd cocotola-synthesizer
      #   pkgforbid -config=../.github/pkgforbid.yml ./...
    requires:
      vars: [PROJECT]

  lint:
    cmds:
      - for:
          - redstart
          - lib
          - cocotola-auth
          - cocotola-core
          - cocotola-synthesizer
        task: lint-project
        vars:
          PROJECT: "{{ .ITEM }}"

  update-mod-project:
    cmds:
      - |
        pushd {{ .PROJECT }}
        GOPROXY=direct go get -u ./...
    requires:
      vars: [PROJECT]

  update-mod:
    cmds:
      - for:
          - redstart
          - lib
          - cocotola-auth
          - cocotola-core
          - cocotola-synthesizer
        task: update-mod-project
        vars:
          PROJECT: "{{ .ITEM }}"

  update-repos:
    cmds:
      - bazelisk run //:gazelle-update-repos
  
  run-hello-world:
    cmds:
      - bazelisk run //hello-world:hello-world

  run-third-party-library:
    cmds:
      - bazelisk run //third-party-library:third-party-library

  run-auth:
    cmds:
      - bazelisk run //cocotola-auth:cocotola-auth

  run-core:
    cmds:
      - bazelisk run //cocotola-core:cocotola-core

  run-synthesizer:
    cmds:
      - bazelisk run //cocotola-synthesizer:cocotola-synthesizer

  build-hello-world:
    cmds:
      - bazelisk run //hello-world:load

  build-project:
    cmds:
      - bazelisk run //{{ .PROJECT }}:load
    requires:
      vars: [PROJECT]

  build:
    cmds:
      - for:
          - cocotola-auth
          - cocotola-core
          - cocotola-synthesizer
        task: build-project
        vars:
          PROJECT: "{{ .ITEM }}"

  push-project:
    cmds:
      - bazelisk run //{{ .PROJECT }}:push -- --tag {{ .TAG }}
    requires:
      vars: [PROJECT, TAG]

  push:
    cmds:
      - for:
          - cocotola-synthesizer
          # - cocotola-auth
        task: push-project
        vars:
          PROJECT: "{{ .ITEM }}"
    requires:
      vars: [TAG]

  test:
    cmds:
      - rm -f ./coverage.lcov
      - bazelisk test //... --collect_code_coverage=true --test_output=errors --test_timeout=60 --test_size_filters=small
      - bazelisk coverage //... --combined_report=lcov --test_size_filters=small
      - |
        OUTPUT_PATH=$(bazel info output_path)
        cp "${OUTPUT_PATH}/_coverage/_coverage_report.dat" ./coverage.lcov

  db-reset-core:
    cmds:
      - migrate -database 'postgres://user:password@127.0.0.1:5432/postgres?sslmode=disable' -source file://src/sqls/postgres/ drop
      - migrate -database 'postgres://user:password@127.0.0.1:5432/postgres?sslmode=disable' -source file://src/sqls/postgres/ up

      - migrate -database 'mysql://user:password@tcp(127.0.0.1:3306)/development' -source file://src/sqls/mysql/ drop
      - migrate -database 'mysql://user:password@tcp(127.0.0.1:3306)/development' -source file://src/sqls/mysql/ up
