// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	service "github.com/kujilabo/cocotola-1.23/cocotola-tatoeba/service"
	mock "github.com/stretchr/testify/mock"
)

// TatoebaSentencePairSearchResult is an autogenerated mock type for the TatoebaSentencePairSearchResult type
type TatoebaSentencePairSearchResult struct {
	mock.Mock
}

type TatoebaSentencePairSearchResult_Expecter struct {
	mock *mock.Mock
}

func (_m *TatoebaSentencePairSearchResult) EXPECT() *TatoebaSentencePairSearchResult_Expecter {
	return &TatoebaSentencePairSearchResult_Expecter{mock: &_m.Mock}
}

// GetResults provides a mock function with given fields:
func (_m *TatoebaSentencePairSearchResult) GetResults() []service.TatoebaSentencePair {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetResults")
	}

	var r0 []service.TatoebaSentencePair
	if rf, ok := ret.Get(0).(func() []service.TatoebaSentencePair); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]service.TatoebaSentencePair)
		}
	}

	return r0
}

// TatoebaSentencePairSearchResult_GetResults_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResults'
type TatoebaSentencePairSearchResult_GetResults_Call struct {
	*mock.Call
}

// GetResults is a helper method to define mock.On call
func (_e *TatoebaSentencePairSearchResult_Expecter) GetResults() *TatoebaSentencePairSearchResult_GetResults_Call {
	return &TatoebaSentencePairSearchResult_GetResults_Call{Call: _e.mock.On("GetResults")}
}

func (_c *TatoebaSentencePairSearchResult_GetResults_Call) Run(run func()) *TatoebaSentencePairSearchResult_GetResults_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TatoebaSentencePairSearchResult_GetResults_Call) Return(_a0 []service.TatoebaSentencePair) *TatoebaSentencePairSearchResult_GetResults_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TatoebaSentencePairSearchResult_GetResults_Call) RunAndReturn(run func() []service.TatoebaSentencePair) *TatoebaSentencePairSearchResult_GetResults_Call {
	_c.Call.Return(run)
	return _c
}

// GetTotalCount provides a mock function with given fields:
func (_m *TatoebaSentencePairSearchResult) GetTotalCount() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTotalCount")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// TatoebaSentencePairSearchResult_GetTotalCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTotalCount'
type TatoebaSentencePairSearchResult_GetTotalCount_Call struct {
	*mock.Call
}

// GetTotalCount is a helper method to define mock.On call
func (_e *TatoebaSentencePairSearchResult_Expecter) GetTotalCount() *TatoebaSentencePairSearchResult_GetTotalCount_Call {
	return &TatoebaSentencePairSearchResult_GetTotalCount_Call{Call: _e.mock.On("GetTotalCount")}
}

func (_c *TatoebaSentencePairSearchResult_GetTotalCount_Call) Run(run func()) *TatoebaSentencePairSearchResult_GetTotalCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TatoebaSentencePairSearchResult_GetTotalCount_Call) Return(_a0 int) *TatoebaSentencePairSearchResult_GetTotalCount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TatoebaSentencePairSearchResult_GetTotalCount_Call) RunAndReturn(run func() int) *TatoebaSentencePairSearchResult_GetTotalCount_Call {
	_c.Call.Return(run)
	return _c
}

// NewTatoebaSentencePairSearchResult creates a new instance of TatoebaSentencePairSearchResult. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTatoebaSentencePairSearchResult(t interface {
	mock.TestingT
	Cleanup(func())
}) *TatoebaSentencePairSearchResult {
	mock := &TatoebaSentencePairSearchResult{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
