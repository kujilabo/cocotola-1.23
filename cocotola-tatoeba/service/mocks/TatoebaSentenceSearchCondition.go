// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// TatoebaSentenceSearchCondition is an autogenerated mock type for the TatoebaSentenceSearchCondition type
type TatoebaSentenceSearchCondition struct {
	mock.Mock
}

type TatoebaSentenceSearchCondition_Expecter struct {
	mock *mock.Mock
}

func (_m *TatoebaSentenceSearchCondition) EXPECT() *TatoebaSentenceSearchCondition_Expecter {
	return &TatoebaSentenceSearchCondition_Expecter{mock: &_m.Mock}
}

// GetKeyword provides a mock function with given fields:
func (_m *TatoebaSentenceSearchCondition) GetKeyword() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetKeyword")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TatoebaSentenceSearchCondition_GetKeyword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKeyword'
type TatoebaSentenceSearchCondition_GetKeyword_Call struct {
	*mock.Call
}

// GetKeyword is a helper method to define mock.On call
func (_e *TatoebaSentenceSearchCondition_Expecter) GetKeyword() *TatoebaSentenceSearchCondition_GetKeyword_Call {
	return &TatoebaSentenceSearchCondition_GetKeyword_Call{Call: _e.mock.On("GetKeyword")}
}

func (_c *TatoebaSentenceSearchCondition_GetKeyword_Call) Run(run func()) *TatoebaSentenceSearchCondition_GetKeyword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TatoebaSentenceSearchCondition_GetKeyword_Call) Return(_a0 string) *TatoebaSentenceSearchCondition_GetKeyword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TatoebaSentenceSearchCondition_GetKeyword_Call) RunAndReturn(run func() string) *TatoebaSentenceSearchCondition_GetKeyword_Call {
	_c.Call.Return(run)
	return _c
}

// GetPageNo provides a mock function with given fields:
func (_m *TatoebaSentenceSearchCondition) GetPageNo() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPageNo")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// TatoebaSentenceSearchCondition_GetPageNo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPageNo'
type TatoebaSentenceSearchCondition_GetPageNo_Call struct {
	*mock.Call
}

// GetPageNo is a helper method to define mock.On call
func (_e *TatoebaSentenceSearchCondition_Expecter) GetPageNo() *TatoebaSentenceSearchCondition_GetPageNo_Call {
	return &TatoebaSentenceSearchCondition_GetPageNo_Call{Call: _e.mock.On("GetPageNo")}
}

func (_c *TatoebaSentenceSearchCondition_GetPageNo_Call) Run(run func()) *TatoebaSentenceSearchCondition_GetPageNo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TatoebaSentenceSearchCondition_GetPageNo_Call) Return(_a0 int) *TatoebaSentenceSearchCondition_GetPageNo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TatoebaSentenceSearchCondition_GetPageNo_Call) RunAndReturn(run func() int) *TatoebaSentenceSearchCondition_GetPageNo_Call {
	_c.Call.Return(run)
	return _c
}

// GetPageSize provides a mock function with given fields:
func (_m *TatoebaSentenceSearchCondition) GetPageSize() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPageSize")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// TatoebaSentenceSearchCondition_GetPageSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPageSize'
type TatoebaSentenceSearchCondition_GetPageSize_Call struct {
	*mock.Call
}

// GetPageSize is a helper method to define mock.On call
func (_e *TatoebaSentenceSearchCondition_Expecter) GetPageSize() *TatoebaSentenceSearchCondition_GetPageSize_Call {
	return &TatoebaSentenceSearchCondition_GetPageSize_Call{Call: _e.mock.On("GetPageSize")}
}

func (_c *TatoebaSentenceSearchCondition_GetPageSize_Call) Run(run func()) *TatoebaSentenceSearchCondition_GetPageSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TatoebaSentenceSearchCondition_GetPageSize_Call) Return(_a0 int) *TatoebaSentenceSearchCondition_GetPageSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TatoebaSentenceSearchCondition_GetPageSize_Call) RunAndReturn(run func() int) *TatoebaSentenceSearchCondition_GetPageSize_Call {
	_c.Call.Return(run)
	return _c
}

// IsRandom provides a mock function with given fields:
func (_m *TatoebaSentenceSearchCondition) IsRandom() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRandom")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// TatoebaSentenceSearchCondition_IsRandom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRandom'
type TatoebaSentenceSearchCondition_IsRandom_Call struct {
	*mock.Call
}

// IsRandom is a helper method to define mock.On call
func (_e *TatoebaSentenceSearchCondition_Expecter) IsRandom() *TatoebaSentenceSearchCondition_IsRandom_Call {
	return &TatoebaSentenceSearchCondition_IsRandom_Call{Call: _e.mock.On("IsRandom")}
}

func (_c *TatoebaSentenceSearchCondition_IsRandom_Call) Run(run func()) *TatoebaSentenceSearchCondition_IsRandom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TatoebaSentenceSearchCondition_IsRandom_Call) Return(_a0 bool) *TatoebaSentenceSearchCondition_IsRandom_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TatoebaSentenceSearchCondition_IsRandom_Call) RunAndReturn(run func() bool) *TatoebaSentenceSearchCondition_IsRandom_Call {
	_c.Call.Return(run)
	return _c
}

// NewTatoebaSentenceSearchCondition creates a new instance of TatoebaSentenceSearchCondition. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTatoebaSentenceSearchCondition(t interface {
	mock.TestingT
	Cleanup(func())
}) *TatoebaSentenceSearchCondition {
	mock := &TatoebaSentenceSearchCondition{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
