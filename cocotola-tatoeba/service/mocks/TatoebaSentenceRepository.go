// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	service "github.com/kujilabo/cocotola-1.23/cocotola-tatoeba/service"
	mock "github.com/stretchr/testify/mock"
)

// TatoebaSentenceRepository is an autogenerated mock type for the TatoebaSentenceRepository type
type TatoebaSentenceRepository struct {
	mock.Mock
}

type TatoebaSentenceRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TatoebaSentenceRepository) EXPECT() *TatoebaSentenceRepository_Expecter {
	return &TatoebaSentenceRepository_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, param
func (_m *TatoebaSentenceRepository) Add(ctx context.Context, param service.TatoebaSentenceAddParameterInterface) error {
	ret := _m.Called(ctx, param)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.TatoebaSentenceAddParameterInterface) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TatoebaSentenceRepository_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type TatoebaSentenceRepository_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - param service.TatoebaSentenceAddParameterInterface
func (_e *TatoebaSentenceRepository_Expecter) Add(ctx interface{}, param interface{}) *TatoebaSentenceRepository_Add_Call {
	return &TatoebaSentenceRepository_Add_Call{Call: _e.mock.On("Add", ctx, param)}
}

func (_c *TatoebaSentenceRepository_Add_Call) Run(run func(ctx context.Context, param service.TatoebaSentenceAddParameterInterface)) *TatoebaSentenceRepository_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.TatoebaSentenceAddParameterInterface))
	})
	return _c
}

func (_c *TatoebaSentenceRepository_Add_Call) Return(_a0 error) *TatoebaSentenceRepository_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TatoebaSentenceRepository_Add_Call) RunAndReturn(run func(context.Context, service.TatoebaSentenceAddParameterInterface) error) *TatoebaSentenceRepository_Add_Call {
	_c.Call.Return(run)
	return _c
}

// ContainsSentenceBySentenceNumber provides a mock function with given fields: ctx, sentenceNumber
func (_m *TatoebaSentenceRepository) ContainsSentenceBySentenceNumber(ctx context.Context, sentenceNumber int) (bool, error) {
	ret := _m.Called(ctx, sentenceNumber)

	if len(ret) == 0 {
		panic("no return value specified for ContainsSentenceBySentenceNumber")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (bool, error)); ok {
		return rf(ctx, sentenceNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) bool); ok {
		r0 = rf(ctx, sentenceNumber)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, sentenceNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TatoebaSentenceRepository_ContainsSentenceBySentenceNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainsSentenceBySentenceNumber'
type TatoebaSentenceRepository_ContainsSentenceBySentenceNumber_Call struct {
	*mock.Call
}

// ContainsSentenceBySentenceNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - sentenceNumber int
func (_e *TatoebaSentenceRepository_Expecter) ContainsSentenceBySentenceNumber(ctx interface{}, sentenceNumber interface{}) *TatoebaSentenceRepository_ContainsSentenceBySentenceNumber_Call {
	return &TatoebaSentenceRepository_ContainsSentenceBySentenceNumber_Call{Call: _e.mock.On("ContainsSentenceBySentenceNumber", ctx, sentenceNumber)}
}

func (_c *TatoebaSentenceRepository_ContainsSentenceBySentenceNumber_Call) Run(run func(ctx context.Context, sentenceNumber int)) *TatoebaSentenceRepository_ContainsSentenceBySentenceNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *TatoebaSentenceRepository_ContainsSentenceBySentenceNumber_Call) Return(_a0 bool, _a1 error) *TatoebaSentenceRepository_ContainsSentenceBySentenceNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TatoebaSentenceRepository_ContainsSentenceBySentenceNumber_Call) RunAndReturn(run func(context.Context, int) (bool, error)) *TatoebaSentenceRepository_ContainsSentenceBySentenceNumber_Call {
	_c.Call.Return(run)
	return _c
}

// CountTatoebaSentencePairs provides a mock function with given fields: ctx, param
func (_m *TatoebaSentenceRepository) CountTatoebaSentencePairs(ctx context.Context, param service.TatoebaSentenceSearchConditionInterface) (int, error) {
	ret := _m.Called(ctx, param)

	if len(ret) == 0 {
		panic("no return value specified for CountTatoebaSentencePairs")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, service.TatoebaSentenceSearchConditionInterface) (int, error)); ok {
		return rf(ctx, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, service.TatoebaSentenceSearchConditionInterface) int); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, service.TatoebaSentenceSearchConditionInterface) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TatoebaSentenceRepository_CountTatoebaSentencePairs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountTatoebaSentencePairs'
type TatoebaSentenceRepository_CountTatoebaSentencePairs_Call struct {
	*mock.Call
}

// CountTatoebaSentencePairs is a helper method to define mock.On call
//   - ctx context.Context
//   - param service.TatoebaSentenceSearchConditionInterface
func (_e *TatoebaSentenceRepository_Expecter) CountTatoebaSentencePairs(ctx interface{}, param interface{}) *TatoebaSentenceRepository_CountTatoebaSentencePairs_Call {
	return &TatoebaSentenceRepository_CountTatoebaSentencePairs_Call{Call: _e.mock.On("CountTatoebaSentencePairs", ctx, param)}
}

func (_c *TatoebaSentenceRepository_CountTatoebaSentencePairs_Call) Run(run func(ctx context.Context, param service.TatoebaSentenceSearchConditionInterface)) *TatoebaSentenceRepository_CountTatoebaSentencePairs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.TatoebaSentenceSearchConditionInterface))
	})
	return _c
}

func (_c *TatoebaSentenceRepository_CountTatoebaSentencePairs_Call) Return(_a0 int, _a1 error) *TatoebaSentenceRepository_CountTatoebaSentencePairs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TatoebaSentenceRepository_CountTatoebaSentencePairs_Call) RunAndReturn(run func(context.Context, service.TatoebaSentenceSearchConditionInterface) (int, error)) *TatoebaSentenceRepository_CountTatoebaSentencePairs_Call {
	_c.Call.Return(run)
	return _c
}

// FindTatoebaSentenceBySentenceNumber provides a mock function with given fields: ctx, sentenceNumber
func (_m *TatoebaSentenceRepository) FindTatoebaSentenceBySentenceNumber(ctx context.Context, sentenceNumber int) (*service.TatoebaSentence, error) {
	ret := _m.Called(ctx, sentenceNumber)

	if len(ret) == 0 {
		panic("no return value specified for FindTatoebaSentenceBySentenceNumber")
	}

	var r0 *service.TatoebaSentence
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*service.TatoebaSentence, error)); ok {
		return rf(ctx, sentenceNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *service.TatoebaSentence); ok {
		r0 = rf(ctx, sentenceNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.TatoebaSentence)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, sentenceNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TatoebaSentenceRepository_FindTatoebaSentenceBySentenceNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTatoebaSentenceBySentenceNumber'
type TatoebaSentenceRepository_FindTatoebaSentenceBySentenceNumber_Call struct {
	*mock.Call
}

// FindTatoebaSentenceBySentenceNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - sentenceNumber int
func (_e *TatoebaSentenceRepository_Expecter) FindTatoebaSentenceBySentenceNumber(ctx interface{}, sentenceNumber interface{}) *TatoebaSentenceRepository_FindTatoebaSentenceBySentenceNumber_Call {
	return &TatoebaSentenceRepository_FindTatoebaSentenceBySentenceNumber_Call{Call: _e.mock.On("FindTatoebaSentenceBySentenceNumber", ctx, sentenceNumber)}
}

func (_c *TatoebaSentenceRepository_FindTatoebaSentenceBySentenceNumber_Call) Run(run func(ctx context.Context, sentenceNumber int)) *TatoebaSentenceRepository_FindTatoebaSentenceBySentenceNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *TatoebaSentenceRepository_FindTatoebaSentenceBySentenceNumber_Call) Return(_a0 *service.TatoebaSentence, _a1 error) *TatoebaSentenceRepository_FindTatoebaSentenceBySentenceNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TatoebaSentenceRepository_FindTatoebaSentenceBySentenceNumber_Call) RunAndReturn(run func(context.Context, int) (*service.TatoebaSentence, error)) *TatoebaSentenceRepository_FindTatoebaSentenceBySentenceNumber_Call {
	_c.Call.Return(run)
	return _c
}

// FindTatoebaSentencePairs provides a mock function with given fields: ctx, param
func (_m *TatoebaSentenceRepository) FindTatoebaSentencePairs(ctx context.Context, param service.TatoebaSentenceSearchConditionInterface) ([]*service.TatoebaSentencePair, error) {
	ret := _m.Called(ctx, param)

	if len(ret) == 0 {
		panic("no return value specified for FindTatoebaSentencePairs")
	}

	var r0 []*service.TatoebaSentencePair
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, service.TatoebaSentenceSearchConditionInterface) ([]*service.TatoebaSentencePair, error)); ok {
		return rf(ctx, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, service.TatoebaSentenceSearchConditionInterface) []*service.TatoebaSentencePair); ok {
		r0 = rf(ctx, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*service.TatoebaSentencePair)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, service.TatoebaSentenceSearchConditionInterface) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TatoebaSentenceRepository_FindTatoebaSentencePairs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTatoebaSentencePairs'
type TatoebaSentenceRepository_FindTatoebaSentencePairs_Call struct {
	*mock.Call
}

// FindTatoebaSentencePairs is a helper method to define mock.On call
//   - ctx context.Context
//   - param service.TatoebaSentenceSearchConditionInterface
func (_e *TatoebaSentenceRepository_Expecter) FindTatoebaSentencePairs(ctx interface{}, param interface{}) *TatoebaSentenceRepository_FindTatoebaSentencePairs_Call {
	return &TatoebaSentenceRepository_FindTatoebaSentencePairs_Call{Call: _e.mock.On("FindTatoebaSentencePairs", ctx, param)}
}

func (_c *TatoebaSentenceRepository_FindTatoebaSentencePairs_Call) Run(run func(ctx context.Context, param service.TatoebaSentenceSearchConditionInterface)) *TatoebaSentenceRepository_FindTatoebaSentencePairs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.TatoebaSentenceSearchConditionInterface))
	})
	return _c
}

func (_c *TatoebaSentenceRepository_FindTatoebaSentencePairs_Call) Return(_a0 []*service.TatoebaSentencePair, _a1 error) *TatoebaSentenceRepository_FindTatoebaSentencePairs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TatoebaSentenceRepository_FindTatoebaSentencePairs_Call) RunAndReturn(run func(context.Context, service.TatoebaSentenceSearchConditionInterface) ([]*service.TatoebaSentencePair, error)) *TatoebaSentenceRepository_FindTatoebaSentencePairs_Call {
	_c.Call.Return(run)
	return _c
}

// NewTatoebaSentenceRepository creates a new instance of TatoebaSentenceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTatoebaSentenceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TatoebaSentenceRepository {
	mock := &TatoebaSentenceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
