// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/kujilabo/cocotola-1.23/lib/domain"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// TatoebaSentence is an autogenerated mock type for the TatoebaSentence type
type TatoebaSentence struct {
	mock.Mock
}

type TatoebaSentence_Expecter struct {
	mock *mock.Mock
}

func (_m *TatoebaSentence) EXPECT() *TatoebaSentence_Expecter {
	return &TatoebaSentence_Expecter{mock: &_m.Mock}
}

// GetAuthor provides a mock function with given fields:
func (_m *TatoebaSentence) GetAuthor() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAuthor")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TatoebaSentence_GetAuthor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthor'
type TatoebaSentence_GetAuthor_Call struct {
	*mock.Call
}

// GetAuthor is a helper method to define mock.On call
func (_e *TatoebaSentence_Expecter) GetAuthor() *TatoebaSentence_GetAuthor_Call {
	return &TatoebaSentence_GetAuthor_Call{Call: _e.mock.On("GetAuthor")}
}

func (_c *TatoebaSentence_GetAuthor_Call) Run(run func()) *TatoebaSentence_GetAuthor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TatoebaSentence_GetAuthor_Call) Return(_a0 string) *TatoebaSentence_GetAuthor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TatoebaSentence_GetAuthor_Call) RunAndReturn(run func() string) *TatoebaSentence_GetAuthor_Call {
	_c.Call.Return(run)
	return _c
}

// GetLang3 provides a mock function with given fields:
func (_m *TatoebaSentence) GetLang3() *domain.Lang3 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLang3")
	}

	var r0 *domain.Lang3
	if rf, ok := ret.Get(0).(func() *domain.Lang3); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Lang3)
		}
	}

	return r0
}

// TatoebaSentence_GetLang3_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLang3'
type TatoebaSentence_GetLang3_Call struct {
	*mock.Call
}

// GetLang3 is a helper method to define mock.On call
func (_e *TatoebaSentence_Expecter) GetLang3() *TatoebaSentence_GetLang3_Call {
	return &TatoebaSentence_GetLang3_Call{Call: _e.mock.On("GetLang3")}
}

func (_c *TatoebaSentence_GetLang3_Call) Run(run func()) *TatoebaSentence_GetLang3_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TatoebaSentence_GetLang3_Call) Return(_a0 *domain.Lang3) *TatoebaSentence_GetLang3_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TatoebaSentence_GetLang3_Call) RunAndReturn(run func() *domain.Lang3) *TatoebaSentence_GetLang3_Call {
	_c.Call.Return(run)
	return _c
}

// GetSentenceNumber provides a mock function with given fields:
func (_m *TatoebaSentence) GetSentenceNumber() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSentenceNumber")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// TatoebaSentence_GetSentenceNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSentenceNumber'
type TatoebaSentence_GetSentenceNumber_Call struct {
	*mock.Call
}

// GetSentenceNumber is a helper method to define mock.On call
func (_e *TatoebaSentence_Expecter) GetSentenceNumber() *TatoebaSentence_GetSentenceNumber_Call {
	return &TatoebaSentence_GetSentenceNumber_Call{Call: _e.mock.On("GetSentenceNumber")}
}

func (_c *TatoebaSentence_GetSentenceNumber_Call) Run(run func()) *TatoebaSentence_GetSentenceNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TatoebaSentence_GetSentenceNumber_Call) Return(_a0 int) *TatoebaSentence_GetSentenceNumber_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TatoebaSentence_GetSentenceNumber_Call) RunAndReturn(run func() int) *TatoebaSentence_GetSentenceNumber_Call {
	_c.Call.Return(run)
	return _c
}

// GetText provides a mock function with given fields:
func (_m *TatoebaSentence) GetText() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetText")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// TatoebaSentence_GetText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetText'
type TatoebaSentence_GetText_Call struct {
	*mock.Call
}

// GetText is a helper method to define mock.On call
func (_e *TatoebaSentence_Expecter) GetText() *TatoebaSentence_GetText_Call {
	return &TatoebaSentence_GetText_Call{Call: _e.mock.On("GetText")}
}

func (_c *TatoebaSentence_GetText_Call) Run(run func()) *TatoebaSentence_GetText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TatoebaSentence_GetText_Call) Return(_a0 string) *TatoebaSentence_GetText_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TatoebaSentence_GetText_Call) RunAndReturn(run func() string) *TatoebaSentence_GetText_Call {
	_c.Call.Return(run)
	return _c
}

// GetUpdatedAt provides a mock function with given fields:
func (_m *TatoebaSentence) GetUpdatedAt() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUpdatedAt")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// TatoebaSentence_GetUpdatedAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpdatedAt'
type TatoebaSentence_GetUpdatedAt_Call struct {
	*mock.Call
}

// GetUpdatedAt is a helper method to define mock.On call
func (_e *TatoebaSentence_Expecter) GetUpdatedAt() *TatoebaSentence_GetUpdatedAt_Call {
	return &TatoebaSentence_GetUpdatedAt_Call{Call: _e.mock.On("GetUpdatedAt")}
}

func (_c *TatoebaSentence_GetUpdatedAt_Call) Run(run func()) *TatoebaSentence_GetUpdatedAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TatoebaSentence_GetUpdatedAt_Call) Return(_a0 time.Time) *TatoebaSentence_GetUpdatedAt_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TatoebaSentence_GetUpdatedAt_Call) RunAndReturn(run func() time.Time) *TatoebaSentence_GetUpdatedAt_Call {
	_c.Call.Return(run)
	return _c
}

// NewTatoebaSentence creates a new instance of TatoebaSentence. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTatoebaSentence(t interface {
	mock.TestingT
	Cleanup(func())
}) *TatoebaSentence {
	mock := &TatoebaSentence{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
